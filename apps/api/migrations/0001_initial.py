# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-27 10:39
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('company', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ErrorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('errorCode', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Gateway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gps_lat', models.FloatField()),
                ('gps_lon', models.FloatField()),
                ('last_seen', models.CharField(max_length=100)),
                ('mac', models.CharField(max_length=100)),
                ('serial', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicationName', models.CharField(max_length=100)),
                ('applicationID', models.UUIDField()),
                ('devEUI', models.UUIDField()),
                ('nodeName', models.CharField(max_length=100)),
                ('data', models.TextField()),
                ('fCnt', models.IntegerField()),
                ('fPort', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_eui', models.CharField(max_length=100)),
                ('app_key', models.CharField(max_length=100)),
                ('dev_addr', models.CharField(max_length=100)),
                ('dev_eui', models.CharField(max_length=100)),
                ('last_seen', models.DateTimeField()),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('last_gateway', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Gateway')),
            ],
        ),
        migrations.CreateModel(
            name='RxInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('altitude', models.IntegerField()),
                ('latitude', models.FloatField()),
                ('loRaSNR', models.IntegerField()),
                ('longitude', models.FloatField()),
                ('gatwayMac', models.UUIDField()),
                ('gatwayName', models.CharField(max_length=100)),
                ('rssi', models.IntegerField()),
                ('time', models.DateTimeField()),
                ('gateway', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Gateway')),
            ],
        ),
        migrations.CreateModel(
            name='Swarm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('last_seen', models.DateTimeField()),
                ('name', models.CharField(max_length=100)),
                ('nodes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Node')),
            ],
        ),
        migrations.CreateModel(
            name='TxInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adr', models.BooleanField(default=False)),
                ('codeRate', models.CharField(max_length=10)),
                ('bandwidth', models.IntegerField(default=0)),
                ('modulation', models.CharField(max_length=10)),
                ('spreadFactor', models.IntegerField(default=0)),
                ('frequency', models.IntegerField(default=0)),
            ],
        ),
        migrations.AddField(
            model_name='message',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Node'),
        ),
        migrations.AddField(
            model_name='message',
            name='rxInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.RxInfo'),
        ),
        migrations.AddField(
            model_name='message',
            name='txInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.TxInfo'),
        ),
        migrations.AddField(
            model_name='user',
            name='gateways',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Gateway'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='nodes',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Node'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
